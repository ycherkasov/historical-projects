
Главы 4-6 Страуструпа
Типы. Интегральные типы (bool, char, int). 
Арифметические типы (интегральные + float)
wchar_t (_t - наследие от ANSI C)
Перечисления. Указатели.
Битовые операции.
Алиасинг. Выравнивание.
Почему rand() - очень медленная функция.

Вопросы: 

Сделать:

Советы:
* Давайте переменным с большой областью видимости большие, понятные имена
* А с малой - короткие однобуквенные.
* Придерживайтесь единого стиля именования.
* Выбирайте имена, отражающие смысл, а не содержание переменной.
* Предпочитайте архитектуронезависимые типы.
* Избегайте беззнаковой арифметики.
* Избегайте понижающих преобразований.
* Избегайте нетривиальной арифметики указателей.
* Пользуйтесь NULL для нулевого указателя, в новом стандарте - nullptr
* Используйте константные ссылки для передачи параметров.
* short is system dependent
* void* лучше использовать на нижнем уровне. На верхних его использование 
  скорее всего является ошибкой проектирования.
* стандартная библиотека C на операциях ввода-вывода значительно быстрее C++
* fp умножение быстрее целочисленного

Порядок вычислений внутри подвыражений не определен (v[i] = i++ - UB).
Побитовые операторы применяются к интегральным типам.
Операторы - это то, что можно перегрузить. Остальное - инструкции (statements)

Aliasing is when more than one lvalue refers to the same memory location 
(when you hear lvalue, think of things (variables) that can be on the left-hand side of assignments), 
i.e. that are modifiable. As an example:

int anint = 0;
int *intptr=&anint;

Выравнивание:
struct S { char c; int i; };
bool is_equal(S a, S b) { return 0 == memcmp(&a, &b, sizeof(S)); }

