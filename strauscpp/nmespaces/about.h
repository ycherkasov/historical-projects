/** @brief 
Глава 8 Страуструпа
Имена с квалификаторами. Директивы using. 
Неименованные пространства имен. 
Псевдонимы пространств имен.
Объединение пространств имен.
Основы исключений.
*/

/*
Советы:
1. Пользуйтесь пространствами имен для разрешения конфликтов имен.
2. Пользуйтесь пространствами имен для выражения логической структуры.
3. Пользуйтесь пространствами имен для обертки старого ANSI-C кода.
4. Избегайте слишком коротких имен пространств.
5. Аккуратно пользуйтесь псевдонимами, если это необходимо.
6. По возможности предпочитайте using-объявления (using aaa::bbb)
   using-директивам (using namespace). Не забывайте, что using-объявления имеют приоритет.
7. По возможности используйте using объявления и директивы в ограниченных областях видимости.
   (особенно в классах и других областях видимости)
8. Помните - механизм перегрузки работает сквозь пространства имен.
   При объявлении using operator+ будут разрешены все перегруженные члены operator+()
9. Бросайте и ловите исключения.
10. Ловите исключения по константной ссылке.
11. Не бросайте исключения встроенных типов (int, bool).
12. Не используйте исключения там где достаточно локальных управляющих конструкций.
	(в пределах одной функции или клоза)
13. Не делайте много вложенных обработчиков исключений без надобности.
14. Не добавляйте в объект исключения конструкции, которые сами могут бросить исключение
    (например string, vector)
15. Перехватывайте исключения конкретных типов.
	Неперехваченные исключения передаются наверх.
16. При нехватке памяти старайтесь освободить ее.
	Для этого std::bad_alloc специально сделано минималистичным.
17. Желательно все исключения наследовать от std::exception, чтобы их мог поймать 
    обработчик крайнего уровня, выглядящий как catch(std::exception & ex)
18. Лучше не кидать исключения по указателю (это требует явного выделения памяти)
*/

