#include "containers2.h"
#include <iostream>
#include <unordered_map>

using namespace std;

// http://en.wikipedia.org/wiki/Hash_table
// http://codeforces.ru/blog/entry/4710
/*
Существуют два основных варианта хеш-таблиц: с цепочками и открытой адресацией
Хеш-таблица содержит некоторый массив элементы которого есть пары (хеш-таблица с открытой адресацией) 
или списки пар (хеш-таблица с цепочками).

Ситуация, когда для различных ключей получается одно и то же хеш-значение, называется коллизией. 
Такие события не так уж и редки — например, при вставке в хеш-таблицу размером 365 ячеек 
всего лишь 23-х элементов вероятность коллизии уже превысит 50 %

В некоторых специальных случаях удаётся избежать коллизий вообще. 
Например, если все ключи элементов известны заранее (или очень редко меняются), 
то для них можно найти некоторую совершенную хеш-функцию, которая распределит их 
по ячейкам хеш-таблицы без коллизий. 
Хеш-таблицы, использующие подобные хеш-функции, не нуждаются в механизме разрешения коллизий, 
и называются хеш-таблицами с прямой адресацией.

Метод цепочек
Каждая ячейка массива H является указателем на связный список (цепочку) пар ключ-значение, 
соответствующих одному и тому же хеш-значению ключа. 
Коллизии просто приводят к тому, что появляются цепочки длиной более одного элемента.

Открытая адресация
В массиве H хранятся сами пары ключ-значение. Алгоритм вставки элемента проверяет 
ячейки массива H в некотором порядке до тех пор, пока не будет найдена первая свободная ячейка, 
в которую и будет записан новый элемент. 
Этот порядок вычисляется на лету, что позволяет сэкономить на памяти для указателей, 
требующихся в хеш-таблицах с цепочками.
Не подходит для сильно заполненных таблиц (см. англ. Вики)
*/
typedef unordered_map<string, string> stringmap;

stringmap merge(stringmap a, stringmap b) {
	stringmap temp(a); 
	temp.insert(b.begin(), b.end()); 
	return temp;
}

void show_hash(){
	// На больших ассоциативных массивах hash-контейнеры быстрее на порядок
	// но при условии правильно подобранной hash-function

	// фундаментальное отличие от map - map требует >, hash_map требует != и хэш-функцию
	// На сильно заполненных таблицах снижается быстродействие, поэтому таблицы умеют "расти"
	// эффективнее задать размер вначале

	// Для выбора хорошей хеш-функции важно тестировать производительность
	// подобрать ее интуитивно очень сложно

	// unordered_map containers are faster than map containers to access 
	// individual elements by their key, although they are generally less efficient 
	// for range iteration through a subset of their elements.

	// Iterators in the container are at least forward iterators.
	
	// empty
	stringmap first;

	// init list
	stringmap second({ { "apple", "red" }, { "lemon", "yellow" } });

	// init list
	stringmap third({ { "orange", "orange" }, { "strawberry", "red" } });

	// copy
	stringmap fourth(second);

	// move
	stringmap fifth(merge(third, fourth));

	// range (slow)
	stringmap sixth(fifth.begin(), fifth.end());

	// insert to map
	sixth.emplace( "banana", "yellow" );
}